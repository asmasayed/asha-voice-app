// src/Schemes.jsx

import React, { useState } from 'react';
import schemeData from './schemes.json'; // ЁЯЪи Imports your 30-entry database
import './Schemes.css'; // Import the beautiful CSS styles

// === 1. OFFLINE NLU LOGIC (Keyword Scoring Engine) ===

const normalizeText = (text) => {
    if (!text) return '';
    return text.toLowerCase()
               .replace(/[^\w\s\u0900-\u097F]/g, '') // Remove punctuation but keep Hindi/Devanagari
               .replace(/рд╣реИ|рд╣реИрдВ|рдФрд░|рдХреА|рдХрд╛|рдХреЗ|рдореЗрдВ|рдХреЛ|рдкрд░|рдПрдХ|рд╣реЛрддрд╛|рд╣реЛрддреА|рд╣реИрдВ|рдХреНрдпрд╛|рдХрдм|рдХрд┐рддрдирд╛|рдЪрд╛рд╣рд┐рдП|рдХреНрдпреЛрдВ|рд╕реЗ/g, '') // Remove filler words
               .trim();
};

const findMultipleSchemeMatches = (query) => {
    if (!query) return [];

    const normalizedQuery = normalizeText(query);
    const queryWords = normalizedQuery.split(/\s+/).filter(word => word.length > 1);

    const schemeMatches = [];

    // High-priority keyword patterns that should override other matches
    const highPriorityPatterns = [
        { pattern: /рдЖрд╢рд╛.*рдмреАрдорд╛.*5.*рд▓рд╛рдЦ|рдЖрд╢рд╛.*5.*рд▓рд╛рдЦ.*рдмреАрдорд╛|рдЖрд╢рд╛.*рд╡рд░реНрдХрд░реНрд╕.*5.*рд▓рд╛рдЦ|рдЖрд╢рд╛.*рдХрд░реНрдорд┐рдпреЛрдВ.*5.*рд▓рд╛рдЦ/, schemeId: 'A4', score: 100 },
        { pattern: /рдЖрд╢рд╛.*рдмреАрдорд╛.*2.*рд▓рд╛рдЦ|рдЖрд╢рд╛.*2.*рд▓рд╛рдЦ.*рдмреАрдорд╛|рдЖрд╢рд╛.*рдкреЗрдВрд╢рди|рдЖрд╢рд╛.*рд░рд┐рдЯрд╛рдпрд░|рд░рд┐рдЯрд╛рдпрд░.*рдЖрд╢рд╛|рдкреЗрдВрд╢рди.*рдЖрд╢рд╛/, schemeId: 'A3', score: 90 },
        { pattern: /рдЯреАрдмреА.*5.*рд▓рд╛рдЦ|рдЯреАрдмреА.*5000|рддрдкреЗрджрд┐рдХ.*5.*рд▓рд╛рдЦ/, schemeId: 'D1', score: 80 },
        { pattern: /рдкреАрдПрдордПрдорд╡реАрд╡рд╛рдИ|pmmvy.*5000|5000.*рдкреАрдПрдордПрдорд╡реАрд╡рд╛рдИ|рдкрд╛рдБрдЪ.*рд╣рдЬрд╛рд░.*рд░реБрдкрдП|5000.*рд░реБрдкрдП|рдкрд╛рдБрдЪ.*рд╣рдЬрд╛рд░.*рдмреЗрдирд┐рдлрд┐рдЯ|5000.*рдмреЗрдирд┐рдлрд┐рдЯ|рдорд╛рдБ.*рдмрдирдиреЗ.*рд╕рд╣рд╛рдпрддрд╛|рдорд╛рдБ.*рдмрдирдиреЗ.*рдкреИрд╕рд╛|рдорд╛рддреГрддреНрд╡.*рд╕рд╣рд╛рдпрддрд╛|рдорд╛рддреГрддреНрд╡.*рдкреИрд╕рд╛/, schemeId: 'M2', score: 80 },
        { pattern: /рдЬреЗрдПрд╕рд╡рд╛рдИ|jsy.*1400|1400.*рдЬреЗрдПрд╕рд╡рд╛рдИ|рд╕рдВрд╕реНрдерд╛рдЧрдд.*рдкреНрд░рд╕рд╡|рдбрд┐рд▓реАрд╡рд░реА.*рдкреИрд╕рд╛|рдкреНрд░рд╕рд╡.*рд╕рд╣рд╛рдпрддрд╛/, schemeId: 'M1', score: 75 },
        // Child malnutrition patterns (HIGHEST PRIORITY - urgent referral needed)
        { pattern: /рдмрдЪреНрдЪрд╛.*рдХрдордЬреЛрд░|рд╢рд┐рд╢реБ.*рдХрдордЬреЛрд░|рдмрдЪреНрдЪрд╛.*рдХреБрдкреЛрд╖рд┐рдд|рд╢рд┐рд╢реБ.*рдХреБрдкреЛрд╖рд┐рдд|рдмрдЪреНрдЪрд╛.*рд╡рдЬрди.*рдХрдо|рд╢рд┐рд╢реБ.*рд╡рдЬрди.*рдХрдо|рдХрдордЬреЛрд░.*рдмрдЪреНрдЪрд╛|рдХреБрдкреЛрд╖рд┐рдд.*рдмрдЪреНрдЪрд╛|рдмрдЪреНрдЪрд╛.*рд╡реАрдХ|рд╢рд┐рд╢реБ.*рд╡реАрдХ|рд╡реАрдХ.*рдмрдЪреНрдЪрд╛|рд╡реАрдХ.*рд╢рд┐рд╢реБ|рдкреЛрд╖рдг.*рдкреБрд░реНрдирд╡рд╛рд╕|рдкреЛрд╖рдг.*рдкреБрдирд░реНрд╡рд╛рд╕|рдПрдирдЖрд░рд╕реА|nrc|рдкреЛрд╖рдг.*рдХреЗрдВрджреНрд░/, schemeId: 'C4', score: 95 },
        // Child health checkup patterns (lower priority - general screening)
        { pattern: /рдмрдЪреНрдЪрд╛.*рдЬрд╛рдВрдЪ.*рдХрд╣рд╛рдБ|рдмрдЪреНрдЪрд╛.*рдЪреЗрдХрдЕрдк.*рдХрд╣рд╛рдБ|рд╢рд┐рд╢реБ.*рдЬрд╛рдВрдЪ.*рдХрд╣рд╛рдБ|рдмрдЪреНрдЪреЗ.*рдХреА.*рдЬрд╛рдВрдЪ/, schemeId: 'C3', score: 85 },
        { pattern: /рдмрдЪреНрдЪрд╛.*рджрд╕реНрдд|рдмрдЪреНрдЪрд╛.*рдбрд╛рдпрд░рд┐рдпрд╛|рд╢рд┐рд╢реБ.*рджрд╕реНрдд/, schemeId: 'C5', score: 85 },
        { pattern: /рдмрдЪреНрдЪрд╛.*рдЯреАрдХрд╛|рдмрдЪреНрдЪрд╛.*рд╡реИрдХреНрд╕реАрди|рд╢рд┐рд╢реБ.*рдЯреАрдХрд╛/, schemeId: 'I1', score: 85 },
        // Newborn care patterns (HBNC - first 42 days)
        { pattern: /рдЬрдиреНрдо.*рдмрд╛рдж.*рджреЗрдЦрднрд╛рд▓|рдЬрдиреНрдо.*рдмрд╛рдж.*рдмрдЪреНрдЪреЗ|рдирд╡рдЬрд╛рдд.*рджреЗрдЦрднрд╛рд▓|42.*рджрд┐рди|рдЬрдиреНрдо.*рдХреЗ.*рдмрд╛рдж/, schemeId: 'C1', score: 88 },
        // Family planning sterilization patterns
        { pattern: /рджреЛ.*рдмрдЪреНрдЪреЛрдВ.*рдмрд╛рдж.*рдирд╕рдмрдВрджреА|рдирд╕рдмрдВрджреА.*рдкреИрд╕рд╛|рд╕реНрдерд╛рдпреА.*рд╕рд╛рдзрди.*рдкреИрд╕рд╛|рдмрдВрдзреНрдпрд╛рдХрд░рдг.*рдкреИрд╕рд╛/, schemeId: 'F2', score: 88 },
        // ANC registration timing patterns
        { pattern: /рдкреНрд░реЗрдЧреНрдиреЗрдВрдЯ.*рд░рдЬрд┐рд╕реНрдЯреНрд░реЗрд╢рди|рдЧрд░реНрднрд╡рддреА.*рдкрдВрдЬреАрдХрд░рдг|рд░рдЬрд┐рд╕реНрдЯреНрд░реЗрд╢рди.*рдХрдм|рдкрдВрдЬреАрдХрд░рдг.*рдХрдм|12.*рд╕рдкреНрддрд╛рд╣|3.*рдорд╣реАрдиреЗ.*рдкрдВрдЬреАрдХрд░рдг/, schemeId: 'M4', score: 88 },
    ];

    // Check high-priority patterns first
    for (const { pattern, schemeId, score } of highPriorityPatterns) {
        if (pattern.test(normalizedQuery)) {
            const matchingScheme = schemeData.find(scheme => scheme.Scheme_ID === schemeId);
            if (matchingScheme) {
                schemeMatches.push({ scheme: matchingScheme, score: score });
            }
        }
    }

    // Enhanced filtering for maternal queries to exclude irrelevant disease protocols
    const isMaternalQuery = normalizedQuery.includes('рдкреНрд░реЗрдЧреНрдиреЗрдВрдЯ') || 
                           normalizedQuery.includes('рдЧрд░реНрднрд╡рддреА') || 
                           normalizedQuery.includes('рдорд╛рддреГрддреНрд╡') ||
                           normalizedQuery.includes('pregnant') ||
                           normalizedQuery.includes('maternal');
    
    const isChildQuery = normalizedQuery.includes('рдмрдЪреНрдЪреЗ') || 
                        normalizedQuery.includes('рд╢рд┐рд╢реБ') || 
                        normalizedQuery.includes('рдмрдЪреНрдЪрд╛') ||
                        normalizedQuery.includes('child') ||
                        normalizedQuery.includes('baby');
    
    const isImmunizationQuery = normalizedQuery.includes('рдЯреАрдХреЗ') || 
                               normalizedQuery.includes('рдЯреАрдХрд╛') || 
                               normalizedQuery.includes('рд╡реИрдХреНрд╕реАрди') ||
                               normalizedQuery.includes('immunization') ||
                               normalizedQuery.includes('vaccine') ||
                               normalizedQuery.includes('vaccination');
    
    // Enhanced filtering to show only truly relevant schemes
    const shouldExcludeScheme = (scheme) => {
        if (isMaternalQuery) {
            // Exclude general disease protocols for maternal queries
            const generalDiseaseProtocols = ['D2', 'D3', 'D4', 'D5']; // Malaria, Dengue, Leprosy, NCD
            return generalDiseaseProtocols.includes(scheme.Scheme_ID);
        }
        
        if (isChildQuery) {
            // Exclude adult-specific schemes for child queries
            const adultSchemes = ['D5', 'F1', 'F2', 'F3', 'F4', 'F5']; // NCD, Family Planning
            return adultSchemes.includes(scheme.Scheme_ID);
        }
        
        if (isImmunizationQuery) {
            // For immunization queries, only show immunization-related schemes
            const immunizationSchemes = ['I1', 'I2', 'I3', 'I4']; // Immunization schemes only
            return !immunizationSchemes.includes(scheme.Scheme_ID);
        }
        
        return false;
    };

    // Create keyword variations for better matching
    const createKeywordVariations = (word) => {
        const variations = [word];
        
        // Add common Hindi variations
        const hindiVariations = {
            'рдкреИрд╕рд╛': ['рд░реБрдкрдпрд╛', 'рд░реБрдкрдпреЗ', 'рдордиреА', 'рдзрди', 'рд░рд╛рд╢рд┐', 'рдмреЗрдирд┐рдлрд┐рдЯ', 'рд▓рд╛рдн', 'рд╕рд╣рд╛рдпрддрд╛'],
            'рдорд┐рд▓рддрд╛': ['рдорд┐рд▓рддрд╛ рд╣реИ', 'рдорд┐рд▓рддреА рд╣реИ', 'рдорд┐рд▓рддреЗ рд╣реИрдВ', 'рджрд┐рдпрд╛ рдЬрд╛рддрд╛', 'рджреА рдЬрд╛рддреА'],
            'рдХрд┐рддрдирд╛': ['рдХрд┐рддрдиреА', 'рдХрд┐рддрдиреЗ', 'рдХрд┐рддрдиреЛрдВ', 'рдХрд┐рддрдирд╛ рдкреИрд╕рд╛', 'рдХрд┐рддрдиреА рд░рд╛рд╢рд┐'],
            'рдпреЛрдЬрдирд╛': ['рд╕реНрдХреАрдо', 'рдкреНрд░реЛрдЧреНрд░рд╛рдо', 'рдХрд╛рд░реНрдпрдХреНрд░рдо', 'рдЕрднрд┐рдпрд╛рди'],
            'рдорд╣рд┐рд▓рд╛': ['рд╕реНрддреНрд░реА', 'рдФрд░рдд', 'рдирд╛рд░реА', 'рдорд╣рд┐рд▓рд╛рдУрдВ'],
            'рдорд╛рдБ': ['рдорд╛рддрд╛', 'рдорджрд░', 'рдорд╛рддреГрддреНрд╡', 'рдорд╛рдБ рдмрдирдирд╛'],
            'рдмрдЪреНрдЪрд╛': ['рд╢рд┐рд╢реБ', 'рдмреЗрдмреА', 'рдмрдЪреНрдЪреЗ', 'рдмрдЪреНрдЪреЛрдВ', 'рдмрд╛рд▓рдХ'],
            'рдЧрд░реНрднрд╡рддреА': ['рдкреНрд░реЗрдЧрдиреЗрдВрдЯ', 'рдЧрд░реНрднрд╛рд╡рд╕реНрдерд╛', 'рдЧрд░реНрднрд╡рддреА рдорд╣рд┐рд▓рд╛'],
            'рдЯреАрдмреА': ['рддрдкреЗрджрд┐рдХ', 'рдХреНрд╖рдп рд░реЛрдЧ', 'рдЯреНрдпреВрдмрд░рдХреБрд▓реЛрд╕рд┐рд╕'],
            'рдПрдЪрдЖрдИрд╡реА': ['рдПрдбреНрд╕', 'рдПрдЪрдЖрдИрд╡реА рдПрдбреНрд╕', 'рдПрдЪрдЖрдИрд╡реА рд╕рдВрдХреНрд░рдордг'],
            'рдордзреБрдореЗрд╣': ['рдбрд╛рдпрдмрд┐рдЯреАрдЬ', 'рд╢реБрдЧрд░', 'рдордзреБрдореЗрд╣ рд░реЛрдЧ'],
            'рдЙрдЪреНрдЪ рд░рдХреНрддрдЪрд╛рдк': ['рд╣рд╛рдИ рдмреНрд▓рдб рдкреНрд░реЗрд╢рд░', 'рдмреАрдкреА', 'рд░рдХреНрддрдЪрд╛рдк'],
            'рдПрдиреАрдорд┐рдпрд╛': ['рдЦреВрди рдХреА рдХрдореА', 'рд░рдХреНрддрд╛рд▓реНрдкрддрд╛', 'рд╣реАрдореЛрдЧреНрд▓реЛрдмрд┐рди рдХреА рдХрдореА'],
            'рдЖрд╢рд╛': ['рдЖрд╢рд╛ рд╡рд░реНрдХрд░', 'рдЖрд╢рд╛ рдХрд░реНрдореА', 'рдЖрд╢рд╛ рд╕рд╣рд╛рдпрд┐рдХрд╛', 'рдЖрд╢рд╛ рдХрд╛рд░реНрдпрдХрд░реНрддрд╛'],
            'рдкреЗрдВрд╢рди': ['рд░рд┐рдЯрд╛рдпрд░рдореЗрдВрдЯ', 'рд░рд┐рдЯрд╛рдпрд░', 'рд╕реЗрд╡рд╛рдирд┐рд╡реГрддреНрддрд┐', 'рдкреЗрдВрд╢рди рд╕реНрдХреАрдо'],
            'рдмреАрдорд╛': ['рдЗрдВрд╢реНрдпреЛрд░реЗрдВрд╕', 'рдХрд╡рд░', 'рд╕реБрд░рдХреНрд╖рд╛', 'рдмреАрдорд╛ рдХрд╡рд░'],
            'рд▓рд╛рдЦ': ['500000', '5 рд▓рд╛рдЦ', 'рдкрд╛рдВрдЪ рд▓рд╛рдЦ', '500,000'],
            '5000': ['рдкрд╛рдБрдЪ рд╣рдЬрд╛рд░', 'рдкрд╛рдВрдЪ рд╣рдЬрд╛рд░', '5000', 'рдкрд╛рдБрдЪ рд╣рдЬрд╝рд╛рд░', 'рдкрд╛рдВрдЪ рд╣рдЬрд╝рд╛рд░'],
            'рдЬрд╛рдВрдЪ': ['рдЪреЗрдХрдЕрдк', 'рд╕реНрдХреНрд░реАрдирд┐рдВрдЧ', 'рдЯреЗрд╕реНрдЯ', 'рдкрд░реАрдХреНрд╖рд╛', 'рдореЗрдбрд┐рдХрд▓ рдЪреЗрдХрдЕрдк', 'рд╕реНрд╡рд╛рд╕реНрдереНрдп рдЬрд╛рдВрдЪ'],
            'рд░реЗрдлрд░': ['рднреЗрдЬрдирд╛', 'рд▓реЗ рдЬрд╛рдирд╛', 'рд░рд┐рдлрд░рд▓', 'рдЯреНрд░рд╛рдВрд╕рдлрд░'],
            'рджрд╡рд╛': ['рджрд╡рд╛рдИ', 'рдЧреЛрд▓реА', 'рдореЗрдбрд┐рд╕рд┐рди', 'рдФрд╖рдзрд┐'],
            'рдЯреАрдХрд╛': ['рд╡реИрдХреНрд╕реАрди', 'рдЗрдВрдЬреЗрдХреНрд╢рди', 'рдЯрд┐рдХрд╛рдХрд░рдг', 'рдмреВрдВрдж'],
            'рдХрдордЬреЛрд░': ['рдХрдордЬреЛрд░реА', 'рджреБрд░реНрдмрд▓', 'рдХрдордЬреЛрд░ рдмрдЪреНрдЪрд╛', 'рдХрдордЬреЛрд░ рд╢рд┐рд╢реБ', 'рдХреБрдкреЛрд╖рд┐рдд', 'рдХреБрдкреЛрд╖рдг', 'рд╡рдЬрди рдХрдо', 'рдкрддрд▓рд╛', 'рджреБрдмрд▓рд╛', 'рд╡реАрдХ', 'рд╡реАрдХ рдмрдЪреНрдЪрд╛', 'рд╡реАрдХ рд╢рд┐рд╢реБ'],
            'рдкреЛрд╖рдг': ['рдкреЛрд╖рдг рдкреБрд░реНрдирд╡рд╛рд╕', 'рдкреЛрд╖рдг рдкреБрдирд░реНрд╡рд╛рд╕', 'рдкреЛрд╖рдг рдХреЗрдВрджреНрд░', 'рдПрдирдЖрд░рд╕реА', 'NRC', 'рдкреЛрд╖рдг рдкреБрдирд░реНрд╡рд╛рд╕ рдХреЗрдВрджреНрд░'],
            'рдХрд╣рд╛рдБ': ['рдХрд╣рд╛рдВ', 'рдХрд╣рд╛', 'рдХрд╣рд╛ рдЬрд╛рдП', 'рдХрд╣рд╛рдВ рдЬрд╛рдирд╛ рд╣реИ'],
            'рд╕рд╛рд▓': ['рд╡рд░реНрд╖', 'рдЙрдореНрд░', 'рдЖрдпреБ', 'рд╕рд╛рд▓ рдХрд╛', 'рд╕рд╛рд▓ рдХреА', 'рд╕рд╛рд▓ рдХреЗ'],
            'рдЬрдиреНрдо': ['рдЬрдирдо', 'рдмрд░реНрде', 'рдбрд┐рд▓реАрд╡рд░реА', 'рдкреНрд░рд╕рд╡'],
            'рджреЗрдЦрднрд╛рд▓': ['рдХреЗрдпрд░', 'рд╕реЗрд╡рд╛', 'рджреЗрдЦрд░реЗрдЦ', 'рд╕рдВрднрд╛рд▓'],
            'рдирд╕рдмрдВрджреА': ['рдмрдВрдзреНрдпрд╛рдХрд░рдг', 'рд╕реНрдерд╛рдпреА рд╕рд╛рдзрди', 'рд╕реНрдЯреЗрд░рд┐рд▓рд╛рдЗрдЬреЗрд╢рди'],
            'рдкреЛрд╖рдг': ['рдиреНрдпреВрдЯреНрд░рд┐рд╢рди', 'рдкреЛрд╖рдг рджрд┐рд╡рд╕', 'рдкреЛрд╖рдг рдХрд╛рд░реНрдпрдХреНрд░рдо'],
            'рдЧрд╛рдВрд╡': ['рд╡рд┐рд▓реЗрдЬ', 'рдЧреНрд░рд╛рдо', 'рдЧреНрд░рд╛рдореАрдг'],
            'рд░рдЬрд┐рд╕реНрдЯреНрд░реЗрд╢рди': ['рдкрдВрдЬреАрдХрд░рдг', 'рд░рдЬрд┐рд╕реНрдЯрд░', 'рд░рдЬрд┐рд╕реНрдЯреНрд░реЗрд╢рди', 'рдкрдВрдЬреАрдХрд░рдг рдХрд░рдирд╛'],
            'рд╕рдкреНрддрд╛рд╣': ['рд╡реАрдХ', 'рд╕рдкреНрддрд╛рд╣', 'рд╣рдлреНрддрд╛', 'рд╣рдлреНрддреЗ']
        };
        
        if (hindiVariations[word]) {
            variations.push(...hindiVariations[word]);
        }
        
        return variations;
    };

    schemeData.forEach(scheme => {
        let currentScore = 0;
        
        // Combine all search fields into one searchable pool
        const searchPool = [
            scheme.Keywords_Vernacular,
            scheme.Scheme_Name_Vernacular,
            scheme.Target_Group,
            scheme.Age_Criteria,
            scheme.Scheme_ID
        ].join(' ').toLowerCase();

        // Score by direct word presence and variations
        queryWords.forEach(qWord => {
            const variations = createKeywordVariations(qWord);
            variations.forEach(variation => {
                if (searchPool.includes(variation.toLowerCase())) {
                    currentScore += 1;
                }
            });
        });
        
        // Score boost for direct IDs/acronyms (e.g., 'JSY', 'PMMVY')
        if (searchPool.includes(normalizedQuery)) {
             currentScore += 5; 
        } else if (normalizedQuery.length > 2 && searchPool.includes(normalizedQuery.substring(0, 3))) {
             currentScore += 3; // Partial acronym match boost
        }

        // Boost score for exact phrase matches
        const exactPhrases = [
            'рдХрд┐рддрдирд╛ рдкреИрд╕рд╛ рдорд┐рд▓рддрд╛',
            'рдХрд┐рддрдиреА рд░рд╛рд╢рд┐ рдорд┐рд▓рддреА',
            'рдХреИрд╕реЗ рдХрд░реЗрдВ',
            'рдХреИрд╕реЗ рдорд┐рд▓реЗрдЧрд╛',
            'рдХрд╣рд╛рдБ рдЬрд╛рдирд╛ рд╣реИ',
            'рдХреМрди рд╕реА рдпреЛрдЬрдирд╛',
            'рдХрдм рддрдХ рдорд┐рд▓реЗрдЧрд╛',
            'рдЖрд╢рд╛ рдХрд╛ рдмреАрдорд╛',
            'рдЖрд╢рд╛ рд╡рд░реНрдХрд░реНрд╕ рдХрд╛ рдмреАрдорд╛',
            '5 рд▓рд╛рдЦ рдХрд╛ рдмреАрдорд╛',
            'рдЖрд╢рд╛ рдкреЗрдВрд╢рди',
            'рдЖрд╢рд╛ рд░рд┐рдЯрд╛рдпрд░',
            'рд░рд┐рдЯрд╛рдпрд░ рдЖрд╢рд╛',
            'рдкреЗрдВрд╢рди рдЖрд╢рд╛',
            'рдкрд╛рдБрдЪ рд╣рдЬрд╛рд░ рд░реБрдкрдП',
            '5000 рд░реБрдкрдП',
            'рдкрд╛рдБрдЪ рд╣рдЬрд╛рд░ рдмреЗрдирд┐рдлрд┐рдЯ',
            '5000 рдмреЗрдирд┐рдлрд┐рдЯ',
            'рдмрдЪреНрдЪрд╛ рдХрдордЬреЛрд░ рд╣реИ',
            'рд╢рд┐рд╢реБ рдХрдордЬреЛрд░ рд╣реИ',
            'рдмрдЪреНрдЪрд╛ рдХреБрдкреЛрд╖рд┐рдд рд╣реИ',
            'рд╢рд┐рд╢реБ рдХреБрдкреЛрд╖рд┐рдд рд╣реИ',
            'рдмрдЪреНрдЪрд╛ рд╡реАрдХ рд╣реИ',
            'рд╢рд┐рд╢реБ рд╡реАрдХ рд╣реИ',
            'рдХрдордЬреЛрд░ рдмрдЪреНрдЪрд╛',
            'рдХреБрдкреЛрд╖рд┐рдд рдмрдЪреНрдЪрд╛',
            'рд╡реАрдХ рдмрдЪреНрдЪрд╛',
            'рдмрдЪреНрдЪрд╛ рд╡рдЬрди рдХрдо',
            'рд╢рд┐рд╢реБ рд╡рдЬрди рдХрдо',
            'рдкреЛрд╖рдг рдкреБрд░реНрдирд╡рд╛рд╕',
            'рдкреЛрд╖рдг рдкреБрдирд░реНрд╡рд╛рд╕',
            'рдПрдирдЖрд░рд╕реА',
            'рдкреЛрд╖рдг рдХреЗрдВрджреНрд░',
            'рдмрдЪреНрдЪрд╛ рдЬрд╛рдВрдЪ рдХрд╣рд╛рдБ',
            'рд╢рд┐рд╢реБ рдЬрд╛рдВрдЪ рдХрд╣рд╛рдБ',
            'рдмрдЪреНрдЪреЗ рдХреА рдЬрд╛рдВрдЪ',
            'рдмрдЪреНрдЪрд╛ рдмреАрдорд╛рд░ рд╣реИ',
            'рд╢рд┐рд╢реБ рдмреАрдорд╛рд░ рд╣реИ',
            'рдЬрдиреНрдо рдХреЗ рдмрд╛рдж рджреЗрдЦрднрд╛рд▓',
            'рдирд╡рдЬрд╛рдд рджреЗрдЦрднрд╛рд▓',
            '42 рджрд┐рди рддрдХ',
            'рджреЛ рдмрдЪреНрдЪреЛрдВ рдХреЗ рдмрд╛рдж рдирд╕рдмрдВрджреА',
            'рдирд╕рдмрдВрджреА рдХрд╛ рдкреИрд╕рд╛',
            'рд╕реНрдерд╛рдпреА рд╕рд╛рдзрди рдкреИрд╕рд╛',
            'рдЧрд╛рдВрд╡ рдореЗрдВ рдкреЛрд╖рдг рджрд┐рд╡рд╕',
            'рдкреЛрд╖рдг рджрд┐рд╡рд╕ рдЧрд╛рдВрд╡',
            'рдЧрд╛рдВрд╡ рд╕реНрд╡рд╛рд╕реНрдереНрдп рджрд┐рд╡рд╕',
            'рдорд╛рдБ рдмрдирдиреЗ рдкрд░ рд╕рд╣рд╛рдпрддрд╛',
            'рдорд╛рдБ рдмрдирдиреЗ рдкрд░ рдкреИрд╕рд╛',
            'рдорд╛рддреГрддреНрд╡ рд╕рд╣рд╛рдпрддрд╛',
            'рдорд╛рддреГрддреНрд╡ рдкреИрд╕рд╛',
            'рд╕рд░рдХрд╛рд░реА рд╕рд╣рд╛рдпрддрд╛ рдорд╛рдБ',
            'рдкреНрд░реЗрдЧреНрдиреЗрдВрдЯ рд░рдЬрд┐рд╕реНрдЯреНрд░реЗрд╢рди',
            'рдЧрд░реНрднрд╡рддреА рдкрдВрдЬреАрдХрд░рдг',
            'рд░рдЬрд┐рд╕реНрдЯреНрд░реЗрд╢рди рдХрдм',
            'рдкрдВрдЬреАрдХрд░рдг рдХрдм',
            '12 рд╕рдкреНрддрд╛рд╣',
            '3 рдорд╣реАрдиреЗ рдкрдВрдЬреАрдХрд░рдг'
        ];
        
        exactPhrases.forEach(phrase => {
            if (normalizedQuery.includes(phrase) && searchPool.includes(phrase)) {
                currentScore += 2;
            }
        });

        // Special boost for ASHA-related queries
        if (normalizedQuery.includes('рдЖрд╢рд╛') && searchPool.includes('рдЖрд╢рд╛')) {
            currentScore += 3;
        }

        // Special boost for ASHA pension queries
        if ((normalizedQuery.includes('рдЖрд╢рд╛') && normalizedQuery.includes('рдкреЗрдВрд╢рди')) || 
            (normalizedQuery.includes('рдЖрд╢рд╛') && normalizedQuery.includes('рд░рд┐рдЯрд╛рдпрд░'))) {
            currentScore += 4;
        }

        // Special boost for PMMVY-related queries (тВ╣5000 benefit)
        if ((normalizedQuery.includes('5000') || normalizedQuery.includes('рдкрд╛рдБрдЪ рд╣рдЬрд╛рд░') || normalizedQuery.includes('рдкрд╛рдВрдЪ рд╣рдЬрд╛рд░')) && 
            (normalizedQuery.includes('рд░реБрдкрдП') || normalizedQuery.includes('рдмреЗрдирд┐рдлрд┐рдЯ') || normalizedQuery.includes('рд▓рд╛рдн'))) {
            currentScore += 4;
        }

        // Special boost for child health checkup queries
        if ((normalizedQuery.includes('рдмрдЪреНрдЪрд╛') || normalizedQuery.includes('рд╢рд┐рд╢реБ')) && 
            (normalizedQuery.includes('рдЬрд╛рдВрдЪ') || normalizedQuery.includes('рдЪреЗрдХрдЕрдк')) &&
            searchPool.includes('рдЬрд╛рдВрдЪ')) {
            currentScore += 4;
        }

        // Special boost for malnutrition/weak child queries (HIGHEST PRIORITY)
        if ((normalizedQuery.includes('рдХрдордЬреЛрд░') || normalizedQuery.includes('рдХреБрдкреЛрд╖рд┐рдд') || normalizedQuery.includes('рд╡рдЬрди рдХрдо') || normalizedQuery.includes('рд╡реАрдХ') || normalizedQuery.includes('рдкреЛрд╖рдг рдкреБрд░реНрдирд╡рд╛рд╕') || normalizedQuery.includes('рдПрдирдЖрд░рд╕реА')) && 
            (normalizedQuery.includes('рдмрдЪреНрдЪрд╛') || normalizedQuery.includes('рд╢рд┐рд╢реБ'))) {
            currentScore += 5; // Higher boost for malnutrition cases
        }

        // Special boost for newborn care queries (HBNC)
        if ((normalizedQuery.includes('рдЬрдиреНрдо') || normalizedQuery.includes('рдирд╡рдЬрд╛рдд')) && 
            (normalizedQuery.includes('рджреЗрдЦрднрд╛рд▓') || normalizedQuery.includes('42'))) {
            currentScore += 4;
        }

        // Special boost for sterilization queries (F2)
        if ((normalizedQuery.includes('рдирд╕рдмрдВрджреА') || normalizedQuery.includes('рд╕реНрдерд╛рдпреА рд╕рд╛рдзрди')) && 
            normalizedQuery.includes('рдкреИрд╕рд╛')) {
            currentScore += 4;
        }

        // Special boost for maternal assistance queries (PMMVY gets priority for general queries)
        if ((normalizedQuery.includes('рдорд╛рдБ') || normalizedQuery.includes('рдорд╛рддреГрддреНрд╡')) && 
            (normalizedQuery.includes('рд╕рд╣рд╛рдпрддрд╛') || normalizedQuery.includes('рдкреИрд╕рд╛') || normalizedQuery.includes('рдмреЗрдирд┐рдлрд┐рдЯ'))) {
            // PMMVY gets higher boost for general motherhood queries
            if (searchPool.includes('5000') || searchPool.includes('рдкрд╛рдБрдЪ рд╣рдЬрд╛рд░')) {
                currentScore += 5; // Higher boost for PMMVY
            } else {
                currentScore += 3; // Lower boost for JSY
            }
        }

        // Special boost for registration timing queries (ANC M4)
        if ((normalizedQuery.includes('рд░рдЬрд┐рд╕реНрдЯреНрд░реЗрд╢рди') || normalizedQuery.includes('рдкрдВрдЬреАрдХрд░рдг')) && 
            (normalizedQuery.includes('рдХрдм') || normalizedQuery.includes('12') || normalizedQuery.includes('3 рдорд╣реАрдиреЗ'))) {
            currentScore += 4;
        }

        // Add scheme to matches if it has a score of at least 1 and passes filtering
        if (currentScore >= 1 && !shouldExcludeScheme(scheme)) {
            schemeMatches.push({ scheme: scheme, score: currentScore });
        }
    });

    // Sort matches by score (highest first) and return only relevant matches (max 5)
    const sortedMatches = schemeMatches
        .sort((a, b) => b.score - a.score);
    
    // Only return schemes with meaningful scores (at least 2 points for relevance)
    // Show at most 5 schemes, but only if they are relevant
    return sortedMatches
        .filter(match => match.score >= 2)
        .slice(0, 5)
        .map(match => match.scheme);
};

// === 2. SCHEMES COMPONENT (UI and Voice Control) ===

const Schemes = ({
    schemeQuery,
    setSchemeQuery,
    schemeResult,
    setSchemeResult,
    recognitionRef,
    accumulatedTranscriptRef,
    recordingStatus,
    setRecordingStatus,
    isOnline
}) => {
    
    // Status flag specifically for scheme listening
    const isListening = recordingStatus === 'listening_scheme';
    
    // Search functionality for schemes
    const [searchTerm, setSearchTerm] = useState('');
    
    // Determine search scope: use voice results if available, otherwise use all schemes
    const searchScope = schemeResult && schemeResult.length > 0 ? schemeResult : schemeData;
    
    // Filter schemes based on search term within the search scope
    const filteredSchemes = searchTerm.trim() 
        ? searchScope.filter(scheme => {
            const searchFields = [
                scheme.Scheme_Name_Vernacular,
                scheme.Keywords_Vernacular,
                scheme.Target_Group,
                scheme.Age_Criteria,
                scheme.Scheme_ID,
                scheme.Summary_Answer_Vernacular
            ].join(' ').toLowerCase();
            
            return searchFields.includes(searchTerm.toLowerCase());
        })
        : []; 

    const handleStartSchemeSearch = () => {
        if (recognitionRef.current) {
            recognitionRef.current.stop();
        }

        const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
        if (!SpeechRecognition) return;

        recognitionRef.current = new SpeechRecognition();
        const recognition = recognitionRef.current;
        
        setSchemeResult(null); 
        setSchemeQuery('');
        setSearchTerm(''); // Clear search when starting new voice query
        accumulatedTranscriptRef.current = '';

        recognition.lang = 'hi-IN';
        recognition.interimResults = true;
        recognition.continuous = false; // Set to false so it stops after a pause in speech

        recognition.onstart = () => {
            setRecordingStatus('listening_scheme');
        };

        recognition.onresult = (event) => {
            let interimTranscript = '';
            let finalTranscript = '';

            for (let i = event.resultIndex; i < event.results.length; ++i) {
                const transcript = event.results[i][0].transcript;
                if (event.results[i].isFinal) {
                    finalTranscript += transcript + ' ';
                } else {
                    interimTranscript += transcript;
                }
            }
            
            setSchemeQuery(accumulatedTranscriptRef.current + interimTranscript);
            
            if (finalTranscript) {
                accumulatedTranscriptRef.current += finalTranscript;
            }
        };

        recognition.onerror = (event) => {
            console.error('Scheme Recognition Error:', event.error);
            setRecordingStatus('idle');
        };
        
        recognition.onend = () => {
            // Trigger the search logic when recognition ends
            if (isListening) {
                handleStopSearch();
            }
        };

        recognition.start();
    };

    const handleStopSearch = () => {
        if (recognitionRef.current) {
            window.speechSynthesis.cancel(); 
            recognitionRef.current.stop(); 
        }
        
        const finalTranscript = accumulatedTranscriptRef.current.trim();
        setRecordingStatus('idle');
        setSchemeQuery(finalTranscript);

        if (finalTranscript.length > 0) {
            const matches = findMultipleSchemeMatches(finalTranscript); // Perform offline NLU search
            setSchemeResult(matches);

            // Text-to-Speech (TTS) for the answer - announce first match
            if (matches && matches.length > 0 && 'speechSynthesis' in window) {
                const answer = matches.length === 1 
                    ? matches[0].Summary_Answer_Vernacular
                    : `рдореБрдЭреЗ ${matches.length} рдпреЛрдЬрдирд╛рдПрдВ рдорд┐рд▓реА рд╣реИрдВред рдкрд╣рд▓реА рдпреЛрдЬрдирд╛: ${matches[0].Summary_Answer_Vernacular}`;
                const utterance = new SpeechSynthesisUtterance(answer);
                utterance.lang = 'hi-IN'; // Ensure Hindi pronunciation
                window.speechSynthesis.speak(utterance);
            }
        } else {
            setSchemeResult(null);
        }
    };

    const buttonText = isListening ? 'Listening...' : ' Ask Scheme Question';
    const buttonStyle = isListening 
        ? { backgroundColor: '#f39c12', color: 'white', animation: 'pulse-animation 1.5s infinite' } 
        : { backgroundColor: '#2ecc71', color: 'white' };

    // Handle offline text input
    const handleOfflineTextSearch = (text) => {
        if (text.trim().length > 0) {
            setSchemeQuery(text);
            const matches = findMultipleSchemeMatches(text);
            setSchemeResult(matches);
            
            // Text-to-Speech (TTS) for the answer - announce first match
            if (matches && matches.length > 0 && 'speechSynthesis' in window) {
                const answer = matches.length === 1 
                    ? matches[0].Summary_Answer_Vernacular
                    : `рдореБрдЭреЗ ${matches.length} рдпреЛрдЬрдирд╛рдПрдВ рдорд┐рд▓реА рд╣реИрдВред рдкрд╣рд▓реА рдпреЛрдЬрдирд╛: ${matches[0].Summary_Answer_Vernacular}`;
                const utterance = new SpeechSynthesisUtterance(answer);
                utterance.lang = 'hi-IN';
                window.speechSynthesis.speak(utterance);
            }
        } else {
            setSchemeResult(null);
        }
    };

    return (
        <div className="schemes-page">
            <h2>рд╕рд░рдХрд╛рд░реА рдпреЛрдЬрдирд╛ рдкреНрд░рд╢реНрдиреЛрддреНрддрд░ (Schemes Q&A)</h2>
            
            {/* Search Bar for Schemes */}
            <div className="search-bar-container">
                <input
                    type="text"
                    className="search-input"
                    placeholder={
                        schemeResult && schemeResult.length > 0 
                            ? `Search within ${schemeResult.length} voice results...`
                            : "Search schemes by name, keywords, or ID..."
                    }
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                />
            </div>
            
            {/* Display Search Results */}
            {searchTerm.trim() && (
                <div className="search-results-container">
                    <h3>
                        Search Results ({filteredSchemes.length} schemes found)
                        {schemeResult && schemeResult.length > 0 && (
                            <span className="search-scope-indicator">
                                {' '}within {schemeResult.length} voice results
                            </span>
                        )}
                    </h3>
                    {filteredSchemes.length > 0 ? (
                        <div className="search-results-list">
                            {filteredSchemes.map((scheme, index) => (
                                <div key={scheme.Scheme_ID} className="search-result-card">
                                    <h4>{scheme.Scheme_Name_Vernacular}</h4>
                                    <div className="scheme-meta">
                                        <span>ID:</span> {scheme.Scheme_ID} | <span>Target:</span> {scheme.Target_Group}
                                    </div>
                                    <div className="summary-section">
                                        <p>Summary:</p>
                                        <div className="summary-answer">{scheme.Summary_Answer_Vernacular}</div>
                                    </div>
                                    <details className="details-section">
                                        <summary>Detailed Information</summary>
                                        <div className="details-content">
                                            <p><strong>Age/Eligibility Criteria:</strong> {scheme.Age_Criteria}</p>
                                            <p><strong>Details:</strong> {scheme.Eligibility_Details_Vernacular}</p>
                                        </div>
                                    </details>
                                </div>
                            ))}
                        </div>
                    ) : (
                        <div className="no-search-results">
                            <p>No schemes found matching "{searchTerm}". Try different keywords.</p>
                        </div>
                    )}
                </div>
            )}
            
            {isOnline ? (
                <>
                    <p>рдЖрд╡рд╛реЫ рд╕реЗ рдкреВрдЫреЗрдВ: "PMMVY рдореЗрдВ рдХрд┐рддрдирд╛ рдкреИрд╕рд╛ рдорд┐рд▓рддрд╛ рд╣реИ?" рдпрд╛ "рдЯреАрдмреА рд░реЗрдлрд░рд▓ рдХреИрд╕реЗ рдХрд░реЗрдВ?"</p>

                    {/* Mic Controls */}
                    <div className="schemes-mic-controls">
                        <button
                            onClick={handleStartSchemeSearch}
                            disabled={isListening}
                            className={`btn ${isListening ? 'btn-danger' : 'btn-primary'}`}
                        >
                            {buttonText}
                        </button>
                        <button
                            onClick={handleStopSearch}
                            disabled={!isListening}
                            className="btn btn-danger"
                        >
                            Stop & Search
                        </button>
                    </div>

                    {/* Display ASHA's Question (Transcript) */}
                    <div className="transcript-display-container">
                        <div className="transcript-box">
                            <p>"{schemeQuery || (isListening ? "Waiting for speech..." : "Press Ask Question to start")}"</p>
                        </div>
                    </div>
                </>
            ) : (
                <>
                    <p>You are offline. Type your scheme question below:</p>
                    
                    {/* Offline Text Input */}
                    <div className="offline-container">
                        <textarea
                            className="offline-textarea"
                            rows="4"
                            value={schemeQuery}
                            onChange={(e) => setSchemeQuery(e.target.value)}
                            placeholder="PMMVY рдореЗрдВ рдХрд┐рддрдирд╛ рдкреИрд╕рд╛ рдорд┐рд▓рддрд╛ рд╣реИ? рдпрд╛ рдЯреАрдмреА рд░реЗрдлрд░рд▓ рдХреИрд╕реЗ рдХрд░реЗрдВ?"
                        />
                        <button 
                            className="offline-search-btn" 
                            onClick={() => handleOfflineTextSearch(schemeQuery)}
                        >
                            Search Schemes
                        </button>
                    </div>
                </>
            )}
            
            {/* Display Search Results / Answers */}
            {schemeResult && schemeResult.length > 0 && (
                <div className="results-container">
                    <h3>{schemeResult.length} рдпреЛрдЬрдирд╛рдПрдВ рдорд┐рд▓реАрдВ</h3>
                    {schemeResult.map((scheme, index) => (
                        <div key={scheme.Scheme_ID} className="result-card">
                            <h4>{index + 1}. {scheme.Scheme_Name_Vernacular}</h4>
                            <div className="scheme-meta">
                                <span>ID:</span> {scheme.Scheme_ID} | <span>Target:</span> {scheme.Target_Group}
                            </div>
                            
                            <div className="summary-section">
                                <p>рд╕рд╛рд░рд╛рдВрд╢ рдЙрддреНрддрд░:</p>
                                <div className="summary-answer">{scheme.Summary_Answer_Vernacular}</div>
                            </div>

                            <details className="details-section">
                                <summary>
                                    рд╡рд┐рд╕реНрддреГрдд рдЬрд╛рдирдХрд╛рд░реА (Eligibility & Full Details)
                                </summary>
                                <div className="details-content">
                                    <p><strong>рдЖрдпреБ/рдкрд╛рддреНрд░рддрд╛ рдорд╛рдирджрдВрдб:</strong> {scheme.Age_Criteria}</p>
                                    <p><strong>рд╡рд┐рд╡рд░рдг:</strong> {scheme.Eligibility_Details_Vernacular}</p>
                                </div>
                            </details>
                        </div>
                    ))}
                </div>
            )}

            {/* Handle No Match Case */}
            {!isListening && schemeQuery && (!schemeResult || schemeResult.length === 0) && (
                <div className="no-match-card">
                    <p>рдорд╛рдлрд╝ рдХрд░реЗрдВ, рдореБрдЭреЗ рдЗрд╕ рдкреНрд░рд╢реНрди рдХреЗ рд▓рд┐рдП рдХреЛрдИ рд╕рдЯреАрдХ рдпреЛрдЬрдирд╛ рдирд╣реАрдВ рдорд┐рд▓реАред рдХреГрдкрдпрд╛ рд╕рд░рд▓ рд╢рдмреНрджреЛрдВ рдореЗрдВ рдлрд┐рд░ рд╕реЗ рдХреЛрд╢рд┐рд╢ рдХрд░реЗрдВред</p>
                </div>
            )}
        </div>
    );
};

export default Schemes;

